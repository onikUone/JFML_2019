 + class FS
	- void generateRuleIdx(SettingForGA setting)
	- void setFuzzyParams(float[][][] _fuzzyParams)
	- void makeFS(SettingForGA setting)
	- void calcConclusion(SettingForGA setting, DataSetInfo tra)
	- float[] reasoning(SettingForGA setting, DataSetInfo dataset)
	- void setFitness(float _fitness)
	- void deepAddRule(int[] rule)
	- void setRuleNum(int _ruleNum)
	- void resetConcList()
	- void mutation(int dim, SettingForGA setting)
	- void calcContribute(int _dim, int _div, SettingForGA setting, DataSetInfo tra, DataSetInfo eva)


 + class FMLpopulation
 	- void initializeFuzzyParams(SettingForGA setting)
 	- generateFS(SettingForGA setting)
 	- outputFuzzyParams(int pop_i)
	- void outputCurrentFML(String folderName, int nowGene, SettingForGA setting)
	- void crossOver(SettingForGA setting)
	- int[] sampringWithout(int num, int ruleNum)
	- int binaryT4(SettingForGA setting)
	- void mutation(SettingForGA setting)
	- void populationUpdate(SettingForGA setting)
	- void calcContribute(SettingForGA setting, DataSetInfo eva)
 	
+ class FmlManager
	- void generateInitialFML(SettingForGA setting)
	

20190506
20190507_first : fuzzyParamsのランダム生成を 1/Fdiv の刻み幅内の乱数で生成するようにした
20190507_second : 1点交叉での子個体生成, （中心のmutationの移動幅を[0, 0.2]から[0, 0.1]へ変更）
20190507_third : popFS = 10に変更

20190508_first : crossOverメソッド使用, popFS = 10 or 30, 分散値範囲[0, 0.4]に変更, 分散のmutation幅を[0, 0.01]に変更, fsGeneの出力間隔を変更(1, 5, 10, 20)
20190508_second : uniformCrossover,     popFS = 10 or 30, 

・各種時間
	Fdiv = 6
	Ndim = 7
	popFS = 5
	fsGeneration = 5
	epoch = 50
	→ 約６分

	Fdiv = 5
	Ndim = 7
	popFS = 5
	fsGeneration = 5
	epoch = 50
	→ 約３分３０秒

	Fdiv = 5
	Ndim = 6
	popFS = 5
	fsGeneration = 5
	epoch = 50
	→ 約２分２０秒

	Fdiv = 5
	Ndim = 6
	popFS = 10
	fsGeneration = 20
	epoch = 50
	→ 約１４分

	Fdiv = 5
	Ndim = 6
	popFS = 30
	fsGeneration = 20
	epoch = 50
	→ 約４５分


TODO
	contributeが良いfuzzyParamsを集めて、突然変異だけで子個体（newFuzzyParams）を生成する方法

	最終世代のFMLを読み込んで、traの学習を進めるプログラムの生成